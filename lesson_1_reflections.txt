How did viewing a diff between two versions of a file help you see the bug that was introduced?

It pinpointed the specific lines where there was a difference in text. In that way I was able to search for the error only within those lines. It helped provide focus on the changes rather than having to write the whole text.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

By being easily able to undo changes that may insert a specific bug into the code but also by being able to go through the revision history and trace the revision at which a specific bug was introduced.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

The pros is that you get to decide when you want to save the next logical change in your code, so it will make sense as a new revision. The cons is that you may forget to submit the revision or you might end up submitting a revision which is too big.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because with code related changes, some files that change might be interrelated rather than standalone ones like it typically happens with docs.

How can you use the commands git log and git diff to view the history of files?

I type git log in order to get the list of all the commits that have been made in the past and the git diff followed by 2 IDs, in order to see what is the change between two commits.

How might using version control make you more confident to make changes that could break something?

Because it is really easy to simply restore the last good working version of the program and easily check the line at which the error was initiated.

Now that you have your workspace set up, what do you want to try using Git for?

Code versioning